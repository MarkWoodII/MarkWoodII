/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void mainSliderChange(GSlider2D source, GEvent event) { //_CODE_:MainSlider:576398:
  cur.x = MainSlider.getValueXF() * width;
  cur.y = MainSlider.getValueYF() * height;
  //println("slider2d1 - GSlider2D >> GEvent." + event + " @ " + millis());
} //_CODE_:MainSlider:576398:

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:Controls:409002:
  appc.background(230);
} //_CODE_:Controls:409002:

public void button1_click2(GButton source, GEvent event) { //_CODE_:Recalculate:704829:
  magnification = magnification * Math.pow(2, zoomLevel.getValueF());
  go();
  MainSlider.setValueXY(0.5, 0.5);

  if (stickyZoom.isSelected() == false) {
    zoomLevel.setValue(0);
    zoomLabel.setText(""+((int)(100 * pow(2, zoomLevel.getValueF()))/100.0));
  }
} //_CODE_:Recalculate:704829:

public void button1_click4(GButton source, GEvent event) { //_CODE_:saving:293264:
  saveShot = true;
  savedAs++;
} //_CODE_:saving:293264:

public void slider1_change2(GSlider source, GEvent event) { //_CODE_:iterSlider:879533:
  float newMaxIters = maxIterations;
  if (iterSlider.getValueF() > 0) {
    newMaxIters = maxIterations * iterSlider.getValueF();
  } else if (iterSlider.getValueF() < 0) {
    newMaxIters = maxIterations / abs(iterSlider.getValueF());
  }

  if (event == GEvent.RELEASED) {
    maxIterations = (int)newMaxIters; 
    iterSlider.setValue(0);
  }

  putIters.setText(""+(int)newMaxIters);
} //_CODE_:iterSlider:879533:

public void chunks2change(GSlider source, GEvent event) { //_CODE_:Chunks2:612255:
  acl = Chunks2.getValueI();
  while (pixelWidth % acl != 0 && pixelHeight % acl != 0) {
    acl--;
  }
  chunkLabel.setText(""+acl);
} //_CODE_:Chunks2:612255:

public void colors2change(GSlider source, GEvent event) { //_CODE_:colors2:940355:
  hue = colors2.getValueF();
  colorsLabel.setText(""+(int)(hue * 100)/100.0);
} //_CODE_:colors2:940355:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:zoomLevel:206728:
  //double newZoomLevel = 1;

  //newZoomLevel = magnification * Math.pow(2, zoomLevel.getValueF());
  zoomLabel.setText(""+((int)(100 * pow(2, zoomLevel.getValueF()))/100.0));


  //if (event == GEvent.RELEASED) {
  //  magnification = newZoomLevel;
  //}
} //_CODE_:zoomLevel:206728:

public void checkbox1_clicked1(GCheckbox source, GEvent event) { //_CODE_:stickyZoom:294669:
  if (stickyZoom.isSelected() == false)
    zoomLevel.setValue(0);
} //_CODE_:stickyZoom:294669:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  MainSlider = new GSlider2D(this, 0, 0, width, height);
  MainSlider.setLimitsX(0.5, 0.0, 1.0);
  MainSlider.setLimitsY(0.5, 0.0, 1.0);
  MainSlider.setNumberFormat(G4P.DECIMAL, 2);
  MainSlider.setOpaque(false);
  MainSlider.addEventHandler(this, "mainSliderChange");
  Controls = GWindow.getWindow(this, "Controls", 0, 0, 300, 360, JAVA2D);
  Controls.noLoop();
  Controls.setActionOnClose(G4P.KEEP_OPEN);
  Controls.addDrawHandler(this, "win_draw1");
  Recalculate = new GButton(Controls, 20, 300, 260, 50);
  Recalculate.setText("Recalculate");
  Recalculate.addEventHandler(this, "button1_click2");
  saving = new GButton(Controls, 20, 10, 260, 40);
  saving.setText("Save Screen Shot");
  saving.addEventHandler(this, "button1_click4");
  escapeIters = new GLabel(Controls, 170, 60, 110, 20);
  escapeIters.setText("Escape Iterations:");
  escapeIters.setOpaque(false);
  putIters = new GLabel(Controls, 170, 80, 110, 20);
  putIters.setText("1000");
  putIters.setOpaque(false);
  iterSlider = new GSlider(Controls, 20, 60, 150, 40, 10.0);
  iterSlider.setLimits(0.1, -10.0, 10.0);
  iterSlider.setNumberFormat(G4P.DECIMAL, 2);
  iterSlider.setOpaque(false);
  iterSlider.addEventHandler(this, "slider1_change2");
  Chunks2 = new GSlider(Controls, 20, 110, 150, 50, 10.0);
  Chunks2.setLimits(10, 1, 20);
  Chunks2.setNumberFormat(G4P.INTEGER, 0);
  Chunks2.setOpaque(false);
  Chunks2.addEventHandler(this, "chunks2change");
  chunkLabel = new GLabel(Controls, 170, 130, 80, 20);
  chunkLabel.setText("10");
  chunkLabel.setOpaque(false);
  label1 = new GLabel(Controls, 170, 110, 120, 20);
  label1.setText("Number of Chunks:");
  label1.setOpaque(false);
  colors2 = new GSlider(Controls, 20, 170, 150, 50, 10.0);
  colors2.setLimits(0.62, 0.0, 1.0);
  colors2.setNumberFormat(G4P.DECIMAL, 2);
  colors2.setOpaque(false);
  colors2.addEventHandler(this, "colors2change");
  colorsLabel = new GLabel(Controls, 170, 190, 80, 20);
  colorsLabel.setText("0.62");
  colorsLabel.setOpaque(false);
  colorsHolderidk = new GLabel(Controls, 170, 170, 110, 20);
  colorsHolderidk.setText("Color (hue space):");
  colorsHolderidk.setOpaque(false);
  zoomLevel = new GSlider(Controls, 20, 230, 150, 50, 10.0);
  zoomLevel.setLimits(0.0, -1.0, 1.0);
  zoomLevel.setNumberFormat(G4P.DECIMAL, 2);
  zoomLevel.setOpaque(false);
  zoomLevel.addEventHandler(this, "slider1_change1");
  zoomLabel = new GLabel(Controls, 170, 250, 80, 20);
  zoomLabel.setText("1");
  zoomLabel.setOpaque(false);
  zoomHolder = new GLabel(Controls, 170, 230, 80, 20);
  zoomHolder.setText("Zoom Level:");
  zoomHolder.setOpaque(false);
  stickyZoom = new GCheckbox(Controls, 170, 270, 80, 20);
  stickyZoom.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  stickyZoom.setText("Sticky");
  stickyZoom.setOpaque(false);
  stickyZoom.addEventHandler(this, "checkbox1_clicked1");
  stickyZoom.setSelected(true);
  Controls.loop();
}

// Variable declarations 
// autogenerated do not edit
GSlider2D MainSlider; 
GWindow Controls;
GButton Recalculate; 
GButton saving; 
GLabel escapeIters; 
GLabel putIters; 
GSlider iterSlider; 
GSlider Chunks2; 
GLabel chunkLabel; 
GLabel label1; 
GSlider colors2; 
GLabel colorsLabel; 
GLabel colorsHolderidk; 
GSlider zoomLevel; 
GLabel zoomLabel; 
GLabel zoomHolder; 
GCheckbox stickyZoom; 
